---

- name: LB | AWS | Discovery VPC by Name
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ lb.vpc_name }}"
  when: lb.vpc_name is defined
  register: vpc_info

- name: LB | AWS | Set VPC ID from discovery
  ansible.builtin.set_fact:
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
  when:
    - lb.vpc_name is defined
    - vpc_info.vpcs|length > 0

- name: LB | AWS | Set VPC ID from config
  ansible.builtin.set_fact:
    vpc_id: "{{ lb.vpc_id }}"
  when: lb.vpc_id is defined

- name: LB | AWS | Discovery subnet by names
  amazon.aws.ec2_vpc_subnet_info:
    filters:
      vpc-id: "{{ vpc_id }}"
      "tag:Name": "{{ item }}"
  with_items: "{{ lb.subnets_names }}"
  when: lb.subnets_discovery
  register: subnet_facts

- name: LB | AWS | SubnetIDs check
  ansible.builtin.assert:
    that:
      - subnet_facts.results|length > 0
    fail_msg: "'subnet_ids' is empty. No subnet found with names: '{{ lb.subnets_names }}' on VPC '{{ vpc_id }}'"

- name: LB | AWS | Reset subnet ID List
  ansible.builtin.set_fact:
    subnet_ids: []
  when: lb.subnets_discovery

- name: LB | AWS | Join discovered subnetIds
  ansible.builtin.set_fact:
    subnet_ids: "{{ subnet_ids | d([]) + [item] }}"
  with_items: "{{ subnet_facts.results | json_query(rt_query) }}"
  vars:
    rt_query: "[].subnets[?vpc_id=='{{ vpc_id }}'].subnet_id"
  when: lb.subnets_discovery

- name: LB | AWS | Create NLB
  community.aws.elb_network_lb:
    state: present
    name: "{{ lb.name }}"
    scheme: "{{ lb.scheme }}"
    subnet_mappings: "{{ lb.subnet_mappings | d(omit) }}"
    subnets: "{{ subnet_ids | d(omit) }}"
    listeners: "{{ lb.listeners | d(omit) }}"
    purge_listeners: "{{ lb.purge_listeners | d('no') }}"
    cross_zone_load_balancing: "{{ lb.cross_zone_load_balancing | d(omit) }}"
    deletion_protection: "{{ lb.deletion_protection | d(omit) }}"
    ip_address_type: "{{ lb.ip_address_type | d(omit) }}"
    tags: "{{ lb.tags | d(omit) }}"
    purge_tags: "{{ lb.purge_tags | d('no') }}"
    wait: "{{ lb.wait | d('no') }}"
  register: lb_out
  until: "lb_out is not failed"
  retries: 3
  delay: 5

- name: LB | AWS | Register DNS record
  community.aws.route53:
    state: present
    zone: "{{ rec.zone }}"
    record: "{{ rec.record }}"
    type: "{{ rec.record_type | d('A') }}"
    value: "{{ lb_out.dns_name }}."
    alias: "{{ rec.alias | d('yes') }}"
    alias_hosted_zone_id: "{{ lb_out.canonical_hosted_zone_id }}"
    private_zone: "{{ rec.private_zone | d(false) }}"
    overwrite: "{{ rec.overwrite | d(false) }}"
  when: lb.register_dns is defined
  with_items: "{{ lb.register_dns }}"
  loop_control:
    loop_var: rec
  register: rec_out
  until: "rec_out is not failed"
  retries: 3
  delay: 5

- name: LB | AWS | Show resources created
  ansible.builtin.debug:
    var: lb_out
  when: debug | d(false)

- name: LB | AWS | Show DNS records created
  ansible.builtin.debug:
    var: rec_out
  when: debug | d(false)

- name: AWS | Update Global states
  ansible.builtin.set_fact:
    cloud_loadbalancers_state: "{{ cloud_loadbalancers_state | d([]) + [_lb_data] }}"
  vars:
    _lb_data:
      state: "{{ lb_out }}"
      dns_records: "{{ rec_out }}"