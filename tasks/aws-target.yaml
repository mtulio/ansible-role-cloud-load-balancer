---

- name: Target Group | AWS | Discovery VPC ID
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ tg.vpc_name }}"
  when: tg.vpc_name is defined
  register: vpc_info

- name: Target Group | AWS | Show VPC Info
  ansible.builtin.debug:
    var: vpc_info
  when: debug|d(false)

- name: Target Group | AWS | Set discovered VPC ID
  ansible.builtin.set_fact:
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
  when:
    - tg.vpc_name is defined
    - vpc_info.vpcs|length > 0

- name: Target Group | AWS | Set VPC ID from config
  ansible.builtin.set_fact:
    vpc_id: "{{ tg.vpc_id }}"
  when: tg.vpc_id is defined

- name: Target Group | AWS | Create {{ tg.name }}
  community.aws.elb_target_group:
    state: present
    region: "{{ tg.region | d(omit) }}"
    name: "{{ tg.name }}"
    vpc_id: "{{ vpc_id }}"
    tags: "{{ tg.tags | d(omit) }}"
    purge_tags: "{{ tg.purge_tags | d('no') }}"
    protocol: "{{ tg.protocol }}"
    port: "{{ tg.port }}"
    # Health Check
    health_check_protocol: "{{ tg.health_check_protocol }}"
    health_check_path: "{{ tg.health_check_path | d(omit) }}"
    health_check_port: "{{ tg.health_check_port | d(omit) }}"
    successful_response_codes: "{{ tg.successful_response_codes | d(omit) }}"
    health_check_interval: "{{ tg.health_check_interval | d(omit) }}"
    health_check_timeout: "{{ tg.health_check_timeout |d(omit) }}"
    healthy_threshold_count: "{{ tg.healthy_threshold_count | d(omit) }}"
    unhealthy_threshold_count: "{{ tg.unhealthy_threshold_count | d(omit) }}"
    # Targets
    target_type: "{{ tg.target_type | d(omit) }}"
    modify_targets: "{{ tg.modify_targets | d(omit) }}"
    tagets: "{{ tg.tagets | d(omit) }}"
    # Config
    stickiness_enabled: "{{ tg.stickiness_enabled | d(omit) }}"
    stickiness_app_cookie_duration: "{{ tg.stickiness_app_cookie_duration | d(omit) }}"
    stickiness_app_cookie_name: "{{ tg.stickiness_app_cookie_name | d(omit) }}"
    stickiness_lb_cookie_duration: "{{ tg.stickiness_lb_cookie_duration | d(omit) }}"
    stickiness_type: "{{ tg.stickiness_type | d(omit) }}"
    proxy_protocol_v2_enabled: "{{ tg.proxy_protocol_v2_enabled | d(omit) }}"
    preserve_client_ip_enabled: "{{ tg.preserve_client_ip_enabled | d(omit) }}"
    deregistration_delay_timeout: "{{ tg.deregistration_delay_timeout | d(omit) }}"
  register: tg_out

- name: Target Group | AWS | Show resource created
  ansible.builtin.debug:
    var: tg_out
  when: debug|d(false)

- name: Target Group | AWS | Discovery and register EC2 targets
  ansible.builtin.include_tasks: aws-tg-register-ec2.yaml
  with_items: "{{ tg.register_ec2 | d([]) }}"
  when: tg.register_ec2 is defined
  loop_control:
    loop_var: machine
